From 922c03127954f81ccb433668157a8b02d7862a22 Mon Sep 17 00:00:00 2001
From: Deepali Chourasia <deepch23@in.ibm.com>
Date: Tue, 16 May 2023 13:55:03 +0000
Subject: [PATCH] Remove vsx suffix in sleef calls

---
 .../cpu/vec/vec256/vsx/vec256_double_vsx.h    | 48 +++++++++----------
 .../cpu/vec/vec256/vsx/vec256_float_vsx.h     | 32 ++++++-------
 2 files changed, 40 insertions(+), 40 deletions(-)

diff --git a/aten/src/ATen/cpu/vec/vec256/vsx/vec256_double_vsx.h b/aten/src/ATen/cpu/vec/vec256/vsx/vec256_double_vsx.h
index c53b7c792e4..a0576534119 100644
--- a/aten/src/ATen/cpu/vec/vec256/vsx/vec256_double_vsx.h
+++ b/aten/src/ATen/cpu/vec/vec256/vsx/vec256_double_vsx.h
@@ -217,35 +217,35 @@ class Vectorized<double> {
   }
 
   Vectorized<double> C10_ALWAYS_INLINE acos() const {
-     return {Sleef_acosd2_u10vsx(_vec0), Sleef_acosd2_u10vsx(_vec1)};
+     return {Sleef_acosd2_u10(_vec0), Sleef_acosd2_u10(_vec1)};
   }
   Vectorized<double> C10_ALWAYS_INLINE asin() const {
-     return {Sleef_asind2_u10vsx(_vec0), Sleef_asind2_u10vsx(_vec1)};
+     return {Sleef_asind2_u10(_vec0), Sleef_asind2_u10(_vec1)};
   }
   Vectorized<double> atan() const {
-     return {Sleef_atand2_u10vsx(_vec0), Sleef_atand2_u10vsx(_vec1)};
+     return {Sleef_atand2_u10(_vec0), Sleef_atand2_u10(_vec1)};
   }
   Vectorized<double> atan2(const Vectorized<double>& b) const {
-     return {Sleef_atan2d2_u10vsx(_vec0, b._vec0), Sleef_atan2d2_u10vsx(_vec1, b._vec1)};
+     return {Sleef_atan2d2_u10(_vec0, b._vec0), Sleef_atan2d2_u10(_vec1, b._vec1)};
   }
   Vectorized<double> copysign(const Vectorized<double> &sign) const {
-    return {Sleef_copysignd2_vsx(_vec0, sign._vec0), Sleef_copysignd2_vsx(_vec1, sign._vec1)};
+    return {Sleef_copysignd2(_vec0, sign._vec0), Sleef_copysignd2(_vec1, sign._vec1)};
   }
   Vectorized<double> erf() const {
-     return {Sleef_erfd2_u10vsx(_vec0), Sleef_erfd2_u10vsx(_vec1)};
+     return {Sleef_erfd2_u10(_vec0), Sleef_erfd2_u10(_vec1)};
   }
   Vectorized<double> erfc() const {
-     return {Sleef_erfcd2_u15vsx(_vec0), Sleef_erfcd2_u15vsx(_vec1)};
+     return {Sleef_erfcd2_u15(_vec0), Sleef_erfcd2_u15(_vec1)};
   }
   Vectorized<double> C10_ALWAYS_INLINE exp() const {
-     return {Sleef_expd2_u10vsx(_vec0), Sleef_expd2_u10vsx(_vec1)};
+     return {Sleef_expd2_u10(_vec0), Sleef_expd2_u10(_vec1)};
   }
   Vectorized<double> expm1() const {
-     return {Sleef_expm1d2_u10vsx(_vec0), Sleef_expm1d2_u10vsx(_vec1)};
+     return {Sleef_expm1d2_u10(_vec0), Sleef_expm1d2_u10(_vec1)};
   }
 
   Vectorized<double> lgamma() const __ubsan_ignore_undefined__ {
-     return {Sleef_lgammad2_u10vsx(_vec0), Sleef_lgammad2_u10vsx(_vec1)};
+     return {Sleef_lgammad2_u10(_vec0), Sleef_lgammad2_u10(_vec1)};
   }
 
   Vectorized<double> erfinv() const {
@@ -268,25 +268,25 @@ class Vectorized<double> {
   }
 
   Vectorized<double> C10_ALWAYS_INLINE log() const {
-     return {Sleef_logd2_u10vsx(_vec0), Sleef_logd2_u10vsx(_vec1)};
+     return {Sleef_logd2_u10(_vec0), Sleef_logd2_u10(_vec1)};
   }
   Vectorized<double> C10_ALWAYS_INLINE log10() const {
-     return {Sleef_log10d2_u10vsx(_vec0), Sleef_log10d2_u10vsx(_vec1)};
+     return {Sleef_log10d2_u10(_vec0), Sleef_log10d2_u10(_vec1)};
   }
   Vectorized<double> C10_ALWAYS_INLINE log1p() const {
-     return {Sleef_log1pd2_u10vsx(_vec0), Sleef_log1pd2_u10vsx(_vec1)};
+     return {Sleef_log1pd2_u10(_vec0), Sleef_log1pd2_u10(_vec1)};
   }
   Vectorized<double> C10_ALWAYS_INLINE log2() const {
-     return {Sleef_log2d2_u10vsx(_vec0), Sleef_log2d2_u10vsx(_vec1)};
+     return {Sleef_log2d2_u10(_vec0), Sleef_log2d2_u10(_vec1)};
   }
   Vectorized<double> C10_ALWAYS_INLINE ceil() const {
     return {vec_ceil(_vec0), vec_ceil(_vec1)};
   }
   Vectorized<double> C10_ALWAYS_INLINE cos() const {
-     return {Sleef_cosd2_u10vsx(_vec0), Sleef_cosd2_u10vsx(_vec1)};
+     return {Sleef_cosd2_u10(_vec0), Sleef_cosd2_u10(_vec1)};
   }
   Vectorized<double> C10_ALWAYS_INLINE cosh() const {
-     return {Sleef_coshd2_u10vsx(_vec0), Sleef_coshd2_u10vsx(_vec1)};
+     return {Sleef_coshd2_u10(_vec0), Sleef_coshd2_u10(_vec1)};
   }
   Vectorized<double> C10_ALWAYS_INLINE floor() const {
     return {vec_floor(_vec0), vec_floor(_vec1)};
@@ -298,16 +298,16 @@ class Vectorized<double> {
     return {vec_rint(_vec0), vec_rint(_vec1)};
   }
   Vectorized<double> C10_ALWAYS_INLINE sin() const {
-     return {Sleef_sind2_u10vsx(_vec0), Sleef_sind2_u10vsx(_vec1)};
+     return {Sleef_sind2_u10(_vec0), Sleef_sind2_u10(_vec1)};
   }
   Vectorized<double> C10_ALWAYS_INLINE sinh() const {
-     return {Sleef_sinhd2_u10vsx(_vec0), Sleef_sinhd2_u10vsx(_vec1)};
+     return {Sleef_sinhd2_u10(_vec0), Sleef_sinhd2_u10(_vec1)};
   }
   Vectorized<double> C10_ALWAYS_INLINE tan() const {
-     return {Sleef_tand2_u10vsx(_vec0), Sleef_tand2_u10vsx(_vec1)};
+     return {Sleef_tand2_u10(_vec0), Sleef_tand2_u10(_vec1)};
   }
   Vectorized<double> C10_ALWAYS_INLINE tanh() const {
-     return {Sleef_tanhd2_u10vsx(_vec0), Sleef_tanhd2_u10vsx(_vec1)};
+     return {Sleef_tanhd2_u10(_vec0), Sleef_tanhd2_u10(_vec1)};
   }
   Vectorized<double> C10_ALWAYS_INLINE trunc() const {
     return {vec_trunc(_vec0), vec_trunc(_vec1)};
@@ -330,18 +330,18 @@ class Vectorized<double> {
   }
 
   Vectorized<double> C10_ALWAYS_INLINE pow(const Vectorized<double>& b) const {
-     return {Sleef_powd2_u10vsx(_vec0, b._vec0), Sleef_powd2_u10vsx(_vec1, b._vec1)};
+     return {Sleef_powd2_u10(_vec0, b._vec0), Sleef_powd2_u10(_vec1, b._vec1)};
   }
   Vectorized<double> C10_ALWAYS_INLINE fmod(const Vectorized<double>& b) const {
-     return {Sleef_fmodd2_vsx(_vec0, b._vec0),Sleef_fmodd2_vsx(_vec1, b._vec1)};
+     return {Sleef_fmodd2(_vec0, b._vec0),Sleef_fmodd2(_vec1, b._vec1)};
   }
 
   Vectorized<double> hypot(const Vectorized<double>& b) const {
-     return {Sleef_hypotd2_u05vsx(_vec0, b._vec0), Sleef_hypotd2_u05vsx(_vec1, b._vec1)};
+     return {Sleef_hypotd2_u05(_vec0, b._vec0), Sleef_hypotd2_u05(_vec1, b._vec1)};
   }
 
   Vectorized<double> nextafter(const Vectorized<double>& b) const {
-     return {Sleef_nextafterd2_vsx(_vec0, b._vec0), Sleef_nextafterd2_vsx(_vec1, b._vec1)};
+     return {Sleef_nextafterd2(_vec0, b._vec0), Sleef_nextafterd2(_vec1, b._vec1)};
   }
 
   Vectorized<double> igamma(const Vectorized<double>& x) const {
diff --git a/aten/src/ATen/cpu/vec/vec256/vsx/vec256_float_vsx.h b/aten/src/ATen/cpu/vec/vec256/vsx/vec256_float_vsx.h
index 0267c40e1ea..2d5a6d27e15 100644
--- a/aten/src/ATen/cpu/vec/vec256/vsx/vec256_float_vsx.h
+++ b/aten/src/ATen/cpu/vec/vec256/vsx/vec256_float_vsx.h
@@ -256,29 +256,29 @@ class Vectorized<float> {
   }
 
   Vectorized<float> C10_ALWAYS_INLINE acos() const {
-     return {Sleef_acosf4_u10vsx(_vec0), Sleef_acosf4_u10vsx(_vec1)};
+     return {Sleef_acosf4_u10(_vec0), Sleef_acosf4_u10(_vec1)};
   }
   Vectorized<float> C10_ALWAYS_INLINE asin() const {
-     return {Sleef_asinf4_u10vsx(_vec0), Sleef_asinf4_u10vsx(_vec1)};
+     return {Sleef_asinf4_u10(_vec0), Sleef_asinf4_u10(_vec1)};
   }
   Vectorized<float> atan() const {
-     return {Sleef_atanf4_u10vsx(_vec0), Sleef_atanf4_u10vsx(_vec1)};
+     return {Sleef_atanf4_u10(_vec0), Sleef_atanf4_u10(_vec1)};
   }
   Vectorized<float> atan2(const Vectorized<float>& b) const {
-     return {Sleef_atan2f4_u10vsx(_vec0, b._vec0), Sleef_atan2f4_u10vsx(_vec1, b._vec1)};
+     return {Sleef_atan2f4_u10(_vec0, b._vec0), Sleef_atan2f4_u10(_vec1, b._vec1)};
   }
   Vectorized<float> copysign(const Vectorized<float> &sign) const {
-    return {Sleef_copysignf4_vsx(_vec0, sign._vec0), Sleef_copysignf4_vsx(_vec1, sign._vec1)};
+    return {Sleef_copysignf4(_vec0, sign._vec0), Sleef_copysignf4(_vec1, sign._vec1)};
   }
   Vectorized<float> lgamma() const {
-     return {Sleef_lgammaf4_u10vsx(_vec0), Sleef_lgammaf4_u10vsx(_vec1)};
+     return {Sleef_lgammaf4_u10(_vec0), Sleef_lgammaf4_u10(_vec1)};
   }
   Vectorized<float> erf() const {
-     return {Sleef_erff4_u10vsx(_vec0), Sleef_erff4_u10vsx(_vec1)};
+     return {Sleef_erff4_u10(_vec0), Sleef_erff4_u10(_vec1)};
   }
 
   Vectorized<float> erfc() const {
-     return {Sleef_erfcf4_u15vsx(_vec0), Sleef_erfcf4_u15vsx(_vec1)};
+     return {Sleef_erfcf4_u15(_vec0), Sleef_erfcf4_u15(_vec1)};
   }
 
   Vectorized<float> erfinv() const {
@@ -346,16 +346,16 @@ class Vectorized<float> {
   }
 
   Vectorized<float> C10_ALWAYS_INLINE log() const {
-    return {Sleef_logf4_u10vsx(_vec0), Sleef_logf4_u10vsx(_vec1)};
+    return {Sleef_logf4_u10(_vec0), Sleef_logf4_u10(_vec1)};
   }
   Vectorized<float> C10_ALWAYS_INLINE log10() const {
-     return {Sleef_log10f4_u10vsx(_vec0), Sleef_log10f4_u10vsx(_vec1)};
+     return {Sleef_log10f4_u10(_vec0), Sleef_log10f4_u10(_vec1)};
   }
   Vectorized<float> C10_ALWAYS_INLINE log1p() const {
-     return {Sleef_log1pf4_u10vsx(_vec0), Sleef_log1pf4_u10vsx(_vec1)};
+     return {Sleef_log1pf4_u10(_vec0), Sleef_log1pf4_u10(_vec1)};
   }
   Vectorized<float> C10_ALWAYS_INLINE log2() const {
-     return {Sleef_log2f4_u10vsx(_vec0), Sleef_log2f4_u10vsx(_vec1)};
+     return {Sleef_log2f4_u10(_vec0), Sleef_log2f4_u10(_vec1)};
   }
   Vectorized<float> C10_ALWAYS_INLINE ceil() const {
     return {vec_ceil(_vec0), vec_ceil(_vec1)};
@@ -507,7 +507,7 @@ class Vectorized<float> {
     return result | sign_bit;
   }
   Vectorized<float> C10_ALWAYS_INLINE tan() const {
-     return {Sleef_tanf4_u10vsx(_vec0), Sleef_tanf4_u10vsx(_vec1)};
+     return {Sleef_tanf4_u10(_vec0), Sleef_tanf4_u10(_vec1)};
   }
   Vectorized<float> C10_ALWAYS_INLINE tanh() const {
     auto x = *this;
@@ -575,15 +575,15 @@ class Vectorized<float> {
   }
 
   Vectorized<float> fmod(const Vectorized<float>& b) const {
-     return {Sleef_fmodf4_vsx(_vec0, b._vec0),Sleef_fmodf4_vsx(_vec1, b._vec1)};
+     return {Sleef_fmodf4(_vec0, b._vec0),Sleef_fmodf4(_vec1, b._vec1)};
   }
 
   Vectorized<float> hypot(const Vectorized<float>& b) const {
-     return {Sleef_hypotf4_u05vsx(_vec0, b._vec0), Sleef_hypotf4_u05vsx(_vec1, b._vec1)};
+     return {Sleef_hypotf4_u05(_vec0, b._vec0), Sleef_hypotf4_u05(_vec1, b._vec1)};
   }
 
   Vectorized<float> nextafter(const Vectorized<float>& b) const {
-     return {Sleef_nextafterf4_vsx(_vec0, b._vec0), Sleef_nextafterf4_vsx(_vec1, b._vec1)};
+     return {Sleef_nextafterf4(_vec0, b._vec0), Sleef_nextafterf4(_vec1, b._vec1)};
   }
 
   Vectorized<float> igamma(const Vectorized<float>& x) const {
-- 
2.34.1

